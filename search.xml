<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Think Python Chapter 1 Part 1</title>
      <link href="/lingluning.github.io/2020/03/11/Think-Python-C1/"/>
      <url>/lingluning.github.io/2020/03/11/Think-Python-C1/</url>
      
        <content type="html"><![CDATA[<h3 id="The-Way-of-Program"><a href="#The-Way-of-Program" class="headerlink" title="The Way of Program"></a>The Way of Program</h3><blockquote><p>The goal of this book is teach you to think like a computer scientist. This way of thinking combines some of the best features of mathematics, engineering, and natural science  Like mathematicians, computer scientists  use formal language to denote ideas(specifically computations).Like engineers they   design things assembling components into systems and evaluating tradeoffs among alternatives. Like scientists, they observed the complex system, form hypotheses, and test predictions. The single most important skill for a computer scientist is problem solving. Problem solving means the ability to formulate problems, think creatively about solutions, and express a solution clearly and accurately. As it turn out, the process of learning to program is an excellent opportunity to practice problem-solving skills. That is why chapter is called “The way of program” </p></blockquote><p>On one level, you will be learning to programing,  a useful skill by itself. On another level, You will use programming as a means to an end. As we go along, that end will become clearer.</p><hr><h4 id="The-Python-Programming-Language"><a href="#The-Python-Programming-Language" class="headerlink" title="The Python Programming Language"></a>The Python Programming Language</h4><p>The programming language you will learn is Python. Python is an example of <strong>high-level language(高级语言)</strong>; other high-level language you might have heard of are C, C++, and Java. There are also <strong>low-level languages(低级语言)</strong> sometimes referred to as <strong>‘machine language(机器语言)’</strong> or <strong>Assembly language(汇编语言)</strong>. Loosely speaking, computers are only run programs writing in low-level language. So programs writing in a high-level language have to be processed before they can run. This extra processing takes some time. Which is a small disadvantage of high level language. </p><p>The advantage is <em>enormous(巨大)</em>. First it is much easier to program in a high-level language. Programs written a high-level language take less time to write. They are shorter and easier to read, and they are more likely to be correct. Second ,high-level language is <em>portable(可移植的)</em>, meaning that they can run on different types of computer with few or no modifications. Low-level programs can run only one kind of computer and have to be rewritten to run on another. Due to these advantage, most all programs are written in high-level languages. Low-level languages are used only for a few specialized applications. </p><p> Two kinds of programs process high-level languages into low-level languages. <strong>Interpreters(解释器)</strong> and <strong>compilers(编译器)</strong>. An interpreter reads a high-level program and <em>executes(执行)</em> it, meaning that it does what program says. It process a program a little at a time. Alternately reading lines and performing computations.<br> <strong>The structure of an interpreter</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="built_in">Code</span> &gt; interpreter &gt; <span class="keyword">Output</span></span><br></pre></td></tr></table></figure><p> A compiler read the program and translates it completely before the program starts to running. In this context, the high level program is called the source code, and the translated program is called the object code or executable. Once a program is compiled, you can execute it repeatedly without further translation.<br><strong>The structure of an compiler</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Source <span class="built_in">Code</span> &gt; Compiler &gt; Object <span class="built_in">Code</span> &gt; Executor &gt; <span class="keyword">Output</span></span><br></pre></td></tr></table></figure><p> Python is considered an interpreted language because Python programs are executed by an interpreter. There are two ways to use the interpreter <strong>interactive mods(交互模式)</strong> and <strong>script mode(脚本模式)</strong>.<br>To execute the script you have to tell interpreter the name of the file. If you have a script named hello_world.py and you are working in a UNIX command window, you type  $ python hello_world.py to execute it. Working in interactive mods is convenient for testing small pieces of cods because you can type and execute it immediately. But anything more a few lines, you should save your code as a script so you can modify and execute in the future. </p><h4 id="What-is-aprogram"><a href="#What-is-aprogram" class="headerlink" title="What is aprogram"></a>What is aprogram</h4><blockquote><p>A program is a <em>sequence(顺序)</em> of instructions that specifies how to perform a computation. The computation might be something mathematical, such as solving <em>a system of equations(方程组)</em> or finding the roots of a <em>polynomial(多项式)</em>, but it can also be a <em>symbolic computation(符号计算)</em>, such as searching and replacing text in a document or compiling a program. </p></blockquote><p>The detail look different in different languages, but a few basic instructions appear in just about every language:</p><ul><li><strong>Input</strong>: Get data from the keyboard, a file, or some other device.</li><li><strong>Output</strong>: Display data on the screen or send data to a file or device.</li><li><strong>Math</strong>:  Perform basic mathematical operations like addition and multiplication.</li><li><strong>Conditional execution(条件执行)</strong>: Check for certain conditions and execute the <em>appropriate(适当的)</em> code.</li></ul><p>Believe it or not, that’s pretty much all there is to it. Every program you’ve ever used, no matter how complicated, is made up of <strong>instructions(指令)</strong> that look pretty much like these. So you can think of programming as the process of breaking a large, complex <strong>task(任务)</strong> into smaller and smaller subtasks until the <strong>subtasks(子任务)</strong> are simple enough to be performed with one of these basic instructions.</p><hr><p><strong>– END –</strong></p>]]></content>
      
      
      <categories>
          
          <category> Read Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/lingluning.github.io/2020/03/10/Hello-Hexo/"/>
      <url>/lingluning.github.io/2020/03/10/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h3><ul><li>test the markdown</li><li>how to use it</li><li>测试汉语</li></ul><blockquote><p>zhushi</p></blockquote><p><em>xieti</em><br><strong>jiacu</strong><br><strong><em>jiacus</em></strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">version-1.0</span></span><br><span class="line"><span class="string">writing by: ling luning</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response, get_object_or_404, redirect, render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Blog, BlogType</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> BlogPostForm</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> read_counter.models <span class="keyword">import</span> ReadCount</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_home</span><span class="params">(request)</span>:</span></span><br><span class="line">    blogs_all_list = Blog.objects.all()</span><br><span class="line">    paginator = Paginator(blogs_all_list, <span class="number">7</span>)</span><br><span class="line">    page_num = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">    page_of_blogs = paginator.get_page(page_num)</span><br><span class="line">    current_page_num = page_of_blogs.number</span><br><span class="line">    page_range = list(range(max(current_page_num - <span class="number">2</span>, <span class="number">1</span>), current_page_num)) + \</span><br><span class="line">                 list(range(current_page_num, min(current_page_num + <span class="number">2</span>, paginator.num_pages) + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] - <span class="number">1</span> &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages - page_range[<span class="number">-1</span>] &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.append(<span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">-1</span>] != paginator.num_pages:</span><br><span class="line">        page_range.append(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the blog types list</span></span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'blogs_all_list'</span>: page_of_blogs.object_list.all(),</span><br><span class="line">        <span class="string">'blog_all'</span>: blogs_all_list,</span><br><span class="line">        <span class="string">'page_of_blogs'</span>: page_of_blogs,</span><br><span class="line">        <span class="string">'page_range'</span>: page_range,</span><br><span class="line">        <span class="string">'blog_types'</span>: BlogType.objects.all(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_detail</span><span class="params">(request, blog_pk)</span>:</span></span><br><span class="line">    blog = get_object_or_404(Blog, pk=blog_pk)</span><br><span class="line">    blog.blog_content = markdown.markdown(</span><br><span class="line">        blog.blog_content, extensions=[</span><br><span class="line">            <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.codehilite'</span>, ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># this part is a read counter, and i try to update it.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.COOKIES.get(<span class="string">'blog_%s_read'</span> % blog_pk):</span><br><span class="line">        ct = ContentType.objects.get_for_model(Blog)</span><br><span class="line">        <span class="keyword">if</span> ReadCount.objects.filter(content_type=ct, object_id=blog.pk).count():</span><br><span class="line">            readnum = ReadCount.objects.get(content_type=ct, object_id=blog.pk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            readnum = ReadCount(content_type=ct, object_id=blog.pk)</span><br><span class="line">        readnum.read_num += <span class="number">1</span></span><br><span class="line">        readnum.save()</span><br><span class="line">    context = &#123;<span class="string">'blog'</span>: blog,</span><br><span class="line">               <span class="string">'previous_blog'</span>: Blog.objects.filter(created_time__gt=blog.created_time).last(),</span><br><span class="line">               <span class="string">'next_blog'</span>: Blog.objects.filter(created_time__lt=blog.created_time).first(),</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">    response = render_to_response(<span class="string">'blog_detail.html'</span>, context)</span><br><span class="line">    response.set_cookie(<span class="string">'blog_%s_read'</span> % blog_pk, <span class="string">'true'</span>, max_age=<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_types</span><span class="params">(request, blog_type_pk)</span>:</span></span><br><span class="line">    blog_type = get_object_or_404(BlogType, pk=blog_type_pk)</span><br><span class="line">    blog_type_list = Blog.objects.filter(blog_type=blog_type)</span><br><span class="line">    paginator = Paginator(blog_type_list, <span class="number">7</span>)</span><br><span class="line">    page_num = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">    page_of_blogs = paginator.get_page(page_num)</span><br><span class="line">    current_page_num = page_of_blogs.number</span><br><span class="line">    page_range = list(range(max(current_page_num - <span class="number">2</span>, <span class="number">1</span>), current_page_num)) + \</span><br><span class="line">                 list(range(current_page_num, min(current_page_num + <span class="number">2</span>, paginator.num_pages) + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] - <span class="number">1</span> &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages - page_range[<span class="number">-1</span>] &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.append(<span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">-1</span>] != paginator.num_pages:</span><br><span class="line">        page_range.append(paginator.num_pages)</span><br><span class="line">    page_of_blogs = paginator.get_page(page_num)</span><br><span class="line">    context = &#123;<span class="string">'blogs'</span>: page_of_blogs.object_list.all(),</span><br><span class="line">               <span class="string">'blog_nums'</span>: blog_type_list.all(),</span><br><span class="line">               <span class="string">'blog_type'</span>: blog_type,</span><br><span class="line">               <span class="string">'page_of_blogs'</span>: page_of_blogs,</span><br><span class="line">               <span class="string">'page_range'</span>: page_range,</span><br><span class="line">               <span class="string">'blog_types'</span>: BlogType.objects.all(),</span><br><span class="line">               <span class="string">'blog_dates'</span>: Blog.objects.dates(<span class="string">'created_time'</span>, <span class="string">'month'</span>, order=<span class="string">"DESC"</span>)&#125;</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'blog_type.html'</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># this part is not work very well so I comment it and i will refine it in the future</span></span><br><span class="line"><span class="meta">@login_required  # 一个登录页面的装饰器， 只有登录成功了以后 才可以访问这个页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_write</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        print(<span class="string">"the POST method"</span>)</span><br><span class="line">        blog_post_form = BlogPostForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> blog_post_form.is_valid():</span><br><span class="line">            new_blog = blog_post_form.save(commit=<span class="literal">False</span>)</span><br><span class="line">            new_blog.author = User.objects.get(id=<span class="number">1</span>)</span><br><span class="line">            new_blog.save()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">"/"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"Illegal POST, Please write it again"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        blog_post_form = BlogPostForm()</span><br><span class="line">        context = &#123;<span class="string">'blog_post_form'</span>: blog_post_form,</span><br><span class="line">                   <span class="string">'blog_types'</span>: BlogType.objects.all(), &#125;</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'blog_write.html'</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'blog_write'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            context = &#123;<span class="string">'login_err'</span>: <span class="string">'Please recheck your username or password !'</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'blog_login.html'</span>, context)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog_login.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My first blog</title>
      <link href="/lingluning.github.io/2020/03/09/hello-world/"/>
      <url>/lingluning.github.io/2020/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Who-am-I"><a href="#Who-am-I" class="headerlink" title="Who am I"></a>Who am I</h3><p>   I’m luning. I’m a college student now living in Japan. My major is Civil engineering and I love coding.  </p><h3 id="About-is-this-blog"><a href="#About-is-this-blog" class="headerlink" title="About is this blog"></a>About is this blog</h3><p>When one day, I found write blog is a good way to learn  somethong, I start to create a blog by myself. At first I tried to use the Django, which a web farmwark based on Python, but I realized it is too hard for me, i don’t have enough Pyhton knowledge to conture it,  and I realized that Hexo is a batter choice, Hexo is a static blog farmwork, you can use template and deploy it on github.  and the most important, it is FREE. In the furture I will focuse on Python and Datascience. </p><h4 id="I-wish-you-have-a-good-day"><a href="#I-wish-you-have-a-good-day" class="headerlink" title="I wish you have a good day"></a>I wish you have a good day</h4>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
