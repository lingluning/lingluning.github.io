<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/lingluning.github.io/2020/03/10/Hello-Hexo/"/>
      <url>/lingluning.github.io/2020/03/10/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h3><ul><li>test the markdown</li><li>how to use it</li><li>测试汉语</li></ul><blockquote><p>zhushi</p></blockquote><p><em>xieti</em><br><strong>jiacu</strong><br><strong><em>jiacus</em></strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">version-1.0</span></span><br><span class="line"><span class="string">writing by: ling luning</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response, get_object_or_404, redirect, render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Blog, BlogType</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> BlogPostForm</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> read_counter.models <span class="keyword">import</span> ReadCount</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_home</span><span class="params">(request)</span>:</span></span><br><span class="line">    blogs_all_list = Blog.objects.all()</span><br><span class="line">    paginator = Paginator(blogs_all_list, <span class="number">7</span>)</span><br><span class="line">    page_num = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">    page_of_blogs = paginator.get_page(page_num)</span><br><span class="line">    current_page_num = page_of_blogs.number</span><br><span class="line">    page_range = list(range(max(current_page_num - <span class="number">2</span>, <span class="number">1</span>), current_page_num)) + \</span><br><span class="line">                 list(range(current_page_num, min(current_page_num + <span class="number">2</span>, paginator.num_pages) + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] - <span class="number">1</span> &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages - page_range[<span class="number">-1</span>] &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.append(<span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">-1</span>] != paginator.num_pages:</span><br><span class="line">        page_range.append(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the blog types list</span></span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'blogs_all_list'</span>: page_of_blogs.object_list.all(),</span><br><span class="line">        <span class="string">'blog_all'</span>: blogs_all_list,</span><br><span class="line">        <span class="string">'page_of_blogs'</span>: page_of_blogs,</span><br><span class="line">        <span class="string">'page_range'</span>: page_range,</span><br><span class="line">        <span class="string">'blog_types'</span>: BlogType.objects.all(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_detail</span><span class="params">(request, blog_pk)</span>:</span></span><br><span class="line">    blog = get_object_or_404(Blog, pk=blog_pk)</span><br><span class="line">    blog.blog_content = markdown.markdown(</span><br><span class="line">        blog.blog_content, extensions=[</span><br><span class="line">            <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">            <span class="string">'markdown.extensions.codehilite'</span>, ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># this part is a read counter, and i try to update it.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.COOKIES.get(<span class="string">'blog_%s_read'</span> % blog_pk):</span><br><span class="line">        ct = ContentType.objects.get_for_model(Blog)</span><br><span class="line">        <span class="keyword">if</span> ReadCount.objects.filter(content_type=ct, object_id=blog.pk).count():</span><br><span class="line">            readnum = ReadCount.objects.get(content_type=ct, object_id=blog.pk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            readnum = ReadCount(content_type=ct, object_id=blog.pk)</span><br><span class="line">        readnum.read_num += <span class="number">1</span></span><br><span class="line">        readnum.save()</span><br><span class="line">    context = &#123;<span class="string">'blog'</span>: blog,</span><br><span class="line">               <span class="string">'previous_blog'</span>: Blog.objects.filter(created_time__gt=blog.created_time).last(),</span><br><span class="line">               <span class="string">'next_blog'</span>: Blog.objects.filter(created_time__lt=blog.created_time).first(),</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">    response = render_to_response(<span class="string">'blog_detail.html'</span>, context)</span><br><span class="line">    response.set_cookie(<span class="string">'blog_%s_read'</span> % blog_pk, <span class="string">'true'</span>, max_age=<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_types</span><span class="params">(request, blog_type_pk)</span>:</span></span><br><span class="line">    blog_type = get_object_or_404(BlogType, pk=blog_type_pk)</span><br><span class="line">    blog_type_list = Blog.objects.filter(blog_type=blog_type)</span><br><span class="line">    paginator = Paginator(blog_type_list, <span class="number">7</span>)</span><br><span class="line">    page_num = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">    page_of_blogs = paginator.get_page(page_num)</span><br><span class="line">    current_page_num = page_of_blogs.number</span><br><span class="line">    page_range = list(range(max(current_page_num - <span class="number">2</span>, <span class="number">1</span>), current_page_num)) + \</span><br><span class="line">                 list(range(current_page_num, min(current_page_num + <span class="number">2</span>, paginator.num_pages) + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] - <span class="number">1</span> &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages - page_range[<span class="number">-1</span>] &gt;= <span class="number">2</span>:</span><br><span class="line">        page_range.append(<span class="string">'...'</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">        page_range.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> page_range[<span class="number">-1</span>] != paginator.num_pages:</span><br><span class="line">        page_range.append(paginator.num_pages)</span><br><span class="line">    page_of_blogs = paginator.get_page(page_num)</span><br><span class="line">    context = &#123;<span class="string">'blogs'</span>: page_of_blogs.object_list.all(),</span><br><span class="line">               <span class="string">'blog_nums'</span>: blog_type_list.all(),</span><br><span class="line">               <span class="string">'blog_type'</span>: blog_type,</span><br><span class="line">               <span class="string">'page_of_blogs'</span>: page_of_blogs,</span><br><span class="line">               <span class="string">'page_range'</span>: page_range,</span><br><span class="line">               <span class="string">'blog_types'</span>: BlogType.objects.all(),</span><br><span class="line">               <span class="string">'blog_dates'</span>: Blog.objects.dates(<span class="string">'created_time'</span>, <span class="string">'month'</span>, order=<span class="string">"DESC"</span>)&#125;</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'blog_type.html'</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># this part is not work very well so I comment it and i will refine it in the future</span></span><br><span class="line"><span class="meta">@login_required  # 一个登录页面的装饰器， 只有登录成功了以后 才可以访问这个页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_write</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        print(<span class="string">"the POST method"</span>)</span><br><span class="line">        blog_post_form = BlogPostForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> blog_post_form.is_valid():</span><br><span class="line">            new_blog = blog_post_form.save(commit=<span class="literal">False</span>)</span><br><span class="line">            new_blog.author = User.objects.get(id=<span class="number">1</span>)</span><br><span class="line">            new_blog.save()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">"/"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"Illegal POST, Please write it again"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        blog_post_form = BlogPostForm()</span><br><span class="line">        context = &#123;<span class="string">'blog_post_form'</span>: blog_post_form,</span><br><span class="line">                   <span class="string">'blog_types'</span>: BlogType.objects.all(), &#125;</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'blog_write.html'</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'blog_write'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            context = &#123;<span class="string">'login_err'</span>: <span class="string">'Please recheck your username or password !'</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'blog_login.html'</span>, context)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'blog_login.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/lingluning.github.io/2020/03/09/hello-world/"/>
      <url>/lingluning.github.io/2020/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
